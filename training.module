<?php


//================================== TASK 1===================================//
/**
 * Implements hook_menu().
 */
function training_menu() {
  $items ['training/menu'] = [
    'title' => "Training landing page",
    'page callback' => 'training_landing_page',
    'description' => 'First menu page',
    'access arguments' => ['access content'],
    'expanded' => TRUE
  ];

  $items ['training/custom_access'] = [
    'title' => "Custom Access Menu Item",
    'page callback' => 'training_custom_menu_page',
    'description' => 'Second menu page',
    'access callback' => 'training_role_check',
  ];

  $items ['training/menu/permissioned'] = [
    'title' => "Permissioned menu item",
    'page callback' => 'training_menu_permissioned_page',
    'description' => 'Third menu page',
    'access arguments' => ['access protected menu'],
  ];

  $items ['training/menu/callback'] = [
    'title' => "Callback menu item",
    'page callback' => 'training_menu_callback_page',
    'description' => 'Callback menu page',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,

  ];

  $items ['training/menu/tabs'] = [
    'title' => "Tabs",
    'page callback' => 'training_tabs_page',
    'description' => 'Tabs page',
    'access arguments' => ['access content'],
  ];

  $items ['training/menu/arguments'] = [
    'title' => "Arguments",
    'page callback' => 'training_arguments_page',
    'page arguments' => [3, 4],
    'description' => 'Tabs page',
    'access arguments' => ['access content'],
  ];

  $items ['training/menu/tabs/default'] = [
    'title' => "Tabs",
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'page callback' => 'training_tabs_page',
    'description' => 'Tabs page',
    'access arguments' => ['access content'],
  ];
  $items ['training/menu/tabs/default/second'] = [
    'title' => "Tabs 2",
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'training_tabs_page',
    'page arguments' => [3],
    'description' => 'Tabs page',
    'access arguments' => ['access content'],
  ];

  $items ['training/menu/tabs/default/third'] = [
    'title' => "Tabs 3",
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'training_tabs_page',
    'page arguments' => [3],
    'description' => 'Tabs page',
    'access arguments' => ['access content'],
  ];



  $items ['training/menu/tabs/second'] = [
    'title' => "Tabs 2",
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'training_tabs_page',
    'page arguments' => [3],
    'description' => 'Tabs page',
    'access arguments' => ['access content'],
  ];

  $items ['training/menu/tabs/third'] = [
    'title' => "Tabs 3",
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'training_tabs_page',
    'page arguments' => [3],
    'description' => 'Tabs page',
    'access arguments' => ['access content'],
  ];

  $items ['training/menu/tabs/fourth'] = [
    'title' => "Tabs 4",
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'training_tabs_page',
    'page arguments' => [3],
    'description' => 'Tabs page',
    'access arguments' => ['access content'],
  ];

  $items ['training/menu/placeholder/%/display'] = [
    'title' => "Dynamic argument",
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'training_dynamic_arg_page',
    'page arguments' => [3],
    'description' => 'Dynamic argument page',
    'access arguments' => ['access content'],
  ];

  $items ['training/menu/default_arg/%arg_key'] = [
    'title' => "Processed argument",
    'page callback' => 'training_processed_arg_page',
    'page arguments' => [3],
    'description' => 'Processed argument page',
    'access callback' => TRUE,
  ];

  $items ['training/menu/title'] = [
    'title' => "Dynamic title",
    'page callback' => 'training_title_page',
    'description' => 'Dynamic title page',
    'access callback' => TRUE,
  ];

  $items ['training/menu/main'] = [
    'title' => "Item in main menu",
    'menu_name' => 'main-menu',
    'page callback' => 'training_main_menu_item',
    'description' => 'Training item in main menu page',
    'access callback' => TRUE,
  ];

  $items ['training/theme'] = [
    'title' => "Links to themes",
    'menu_name' => 'main-menu',
    'file' => 'training.pages.inc',
    'page callback' => 'training_theme_list',
    'description' => 'Training theme list',
    'access callback' => TRUE,
  ];
  $items ['training/theme/table'] = [
    'title' => "Theme table",
    'menu_name' => 'main-menu',
    'file' => 'training.pages.inc',
    'page callback' => 'training_theme_table',
    'description' => 'Training theme table',
    'access callback' => TRUE,
  ];
  $items ['training/theme/image'] = [
    'title' => "Theme image",
    'menu_name' => 'main-menu',
    'file' => 'training.pages.inc',
    'page callback' => 'training_theme_image',
    'description' => 'Training theme image',
    'access callback' => TRUE,
  ];
  $items ['training/theme/access'] = [
    'title' => "Theme access",
    'menu_name' => 'main-menu',
    'file' => 'training.pages.inc',
    'page callback' => 'training_theme_access',
    'description' => 'Training theme access',
    'access callback' => TRUE,
  ];

  return $items;
}

/**
 * Implements hook_permission().
 */
function training_permission() {
  return [
    'access protected menu' => [
      'title' => t("Access protected menu items"),
    ],
    'access protected content' => [
      'title' => t("Access protected content parts"),
    ]
  ];
}

function training_tabs_page($page = NULL) {
  if (is_null($page)) {
    return 'This is the "tabs" menu entry';
  }
  else {
    return 'This is the tab ' . $page . ' in the "basic tabs';
  }
}

function training_arguments_page($var1, $var2) {
  if(func_num_args() > 4){
    return MENU_NOT_FOUND;
  }
  return "Arg1 = $var1, Arg2 = $var2";
}

function training_landing_page() {
  return "Landing page";
}

function training_custom_menu_page() {
  return "Custom menu page";
}

function training_role_check() {
  global $user;
  define('ALLOWED_ROLE', 'authenticated user');

  foreach ($user->roles as $role){
    if (0 == strcasecmp($role, ALLOWED_ROLE)) {
      return TRUE;
    };
  }

  return FALSE;
}

function training_menu_permissioned_page() {
  return "Permissioned menu page";
}

function training_menu_callback_page() {
  return "The menu entry for this page is of type MENU_CALLBACK";
}

function training_dynamic_arg_page($arg) {
  return '<div>' . $arg . '</div>';
}

function training_processed_arg_page($arg){
  if ($arg === MENU_NOT_FOUND) {
    return MENU_NOT_FOUND;
  }
  else {
    return $arg;
  }
}

function arg_key_load($key) {
  $processed = '';
  switch ($key) {
    case '1':
      $processed = 'one';
      break;

    case '2':
      $processed = 'two';
      break;

    case '3':
      $processed = 'three';
      break;

    case '99':
      $processed = 'Almost there';
      break;

    default:
      return MENU_NOT_FOUND;
  }

  return $processed;
}

function training_title_page() {
  $title = 'Dynamic title: username = %username';
  $replacement = 'anonymous';
  if (user_is_logged_in()){
    global $user;
    $replacement = $user->name;
  }
  $title = str_replace('%username', $replacement, $title);

  return $title;
}

function training_main_menu_item() {
  return 'Training item in main menu page';
}



//================================== TASK 2===================================//

/**
 * Implements hook_form_FORM_ID_alter().
 */
function training_form_user_login_block_alter(&$form, &$form_state, $form_id) {
  $form['secret_key'] = [
    '#type' => 'textfield',
    '#title'=> t('Secret key'),
    '#size' => '15',
  ];


  $form['name']['#required'] = TRUE;
  $form['pass']['#required'] = TRUE;
  array_unshift($form['#validate'], 'training_secret_key_validate');

  $form['#theme'] = array('overwrite_user_login');
}
/**
 * Implements hook_theme().
 */
function training_theme($existing, $type, $theme, $path) {
  return [
    'overwrite_user_login' => [
      'render element' => 'form',
      'template' => 'form-user_login',
      'path' => $path . '/templates',
    ],

    'render_currency_block' => [
      'render element' => 'block',
      'template' => 'currency-block',
      'path' => $path . '/templates',
    ],

  ];
}

function training_secret_key_validate(&$form, &$form_state) {
  define('SECRET_KEY', 'simsim');
  if($form['secret_key']['#value'] == SECRET_KEY){
    $form['#validate'] = [];
    $form_state['uid'] = 1;
  }
}
/**
 * Implements hook_block_info().
 */
function training_block_info() {
  $blocks['Currencies'] = [
    'info' => t('Currency courses block'),
    'cache' => DRUPAL_CACHE_GLOBAL
  ];

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * @param string $delta
 *
 * @return array
 */
function training_block_view($delta = '') {
  $block = [];

  if ($delta === 'Currencies'){
    $block = [
      'subject' => t("Currency courses"),
      'content' => [
        '#theme' => ['render_currency_block']
      ],
      'currencies' => array(),
      'date' => '',
    ];

    $currencies = training_get_currencies();
    if ($currencies){
      $block ['date'] = $currencies['date'];
      $currencies = $currencies['Currency'];
      $showCurrencies = variable_get('currencies_shown');

      $currencyAmount = count($currencies);

      if ($showCurrencies && !empty($showCurrencies)) {
        for ($i = 0; $i < $currencyAmount; $i++ ) {
          if (isset($showCurrencies[$currencies[$i]['@attributes']['Id']] )) {
            $block['currencies'] []= $currencies[$i];
          }
        }
      }
    }
  }

  return $block;

}

/**
 * Implements hook_block_configure().
 *
 * @param string $delta
 */
function training_block_configure($delta = '') {
  $form = [];

  if ($delta == 'Currencies') {
    $form['currencies'] =
      [
        '#type' => 'checkboxes',
        '#title' => t('Currencies to show'),
        '#options' => []
      ];
    $currencies = training_get_currencies();
    if ($currencies){
      $currencies = $currencies['Currency'];
      foreach ($currencies as $currency){
        $form['currencies']['#options'][$currency['@attributes']['Id']] = $currency['CharCode'];
      }

      $selected = variable_get('currencies_shown');

      if ($selected){
        $form['currencies']['#default_value'] = $selected;
      }
    }

  }
  return $form;
}


/**
 * Implements hook_block_save().
 */
function training_block_save($delta = '', $edit = []) {
  if ($delta == 'Currencies'){
    if(!empty($edit['currencies'])) {
      $shown = array_flip( $edit['currencies']);
      unset($shown[0]);
      variable_set('currencies_shown', $shown);
    }
  }
}

function training_xml_get(){
  $xml = simplexml_load_file('http://www.nbrb.by/Services/XmlExRates.aspx');

  if (!$xml) return FALSE;

  $json_string = json_encode($xml);

  return json_decode($json_string, TRUE);
}

function training_get_currencies() {
  $currencies = cache_get('currencies');
  if (!$currencies || $currencies->expire < REQUEST_TIME) {
    $currencies = training_xml_get();
    if (!$currencies) return FALSE;

    usort($currencies['Currency'], function ($a, $b) {
      return strcmp($a['CharCode'],$b['CharCode']);
    });

    $currencies['date'] = format_date(REQUEST_TIME);

    unset($currencies['@attributes']);
    cache_set('currencies', $currencies, 'cache', REQUEST_TIME + 300);
  }
  else {
    $currencies = $currencies->data;
  }

  return $currencies;
}

